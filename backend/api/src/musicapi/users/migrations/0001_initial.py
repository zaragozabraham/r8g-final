# Generated by Django 4.0.3 on 2022-05-05 02:53

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('albums', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('songs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('mode', models.IntegerField(choices=[(1, 'Customer'), (2, 'Admin')], default=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userOrders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OwnedSongs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownedSongsUser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userPlaylist', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SongPlaylist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('playlistID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlistID', to='users.playlist')),
                ('songID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlistSongID', to='songs.song')),
            ],
        ),
        migrations.CreateModel(
            name='SongOwned',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ownedID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownedListID', to='users.ownedsongs')),
                ('songID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownedSongID', to='songs.song')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedAlbums',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownedAlbumsUser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderSong',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('songID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orderSongID', to='songs.song')),
                ('userOrderID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orderSongs', to='users.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderAlbum',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('albumID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orderAlbumID', to='albums.album')),
                ('userOrderID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orderAlbums', to='users.order')),
            ],
        ),
        migrations.CreateModel(
            name='AlbumOwned',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('albumID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownedAlbumsID', to='albums.album')),
                ('ownedAlbumsID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownedAlbums', to='users.ownedalbums')),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(max_length=10)),
                ('addres_line', models.CharField(max_length=255)),
                ('addres_line2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=128)),
                ('state', models.CharField(max_length=128)),
                ('country', models.CharField(choices=[('US', 'United States'), ('MX', 'Mexico'), ('CA', 'Canada')], default='US', max_length=2)),
                ('zipCode', models.CharField(max_length=32)),
                ('default', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
